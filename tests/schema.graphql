schema {
    query: Query
}

interface Node {
    id: ID!
}

type Query {
    ping: String!

    object: ObjectTest
    objects: [ObjectTest!]!
    objectNullable: [ObjectTest!]
    objectItemNullable: [ObjectTest]!
    objectItemAndFieldNullable: [ObjectTest]

    objectWithArgsAndInput(
        id: ID!
        idNullable: ID
        string: String!
        stringNullable: String
        stringDefault: String = "Test"
        boolean: Boolean!
        booleanNullable: Boolean
        booleanDefault: Boolean = true
        float: Float!
        floatNullable: Float
        floatDefault: Float = 0.5
        int: Int!
        intNullable: Int
        intDefault: Int = 1
        input: ObjectInput!
        inputNullable: ObjectInput
        enum: EnumTest!
        enumNullable: EnumTest
        enumDefault: EnumTest = ONE
        mappedEnum: MappedEnum!
        mappedEnumNullable: MappedEnum
    ): ObjectTest

    fieldReturnsInterface: Node
    fieldReturnsUnion: ObjectUnion
    objectThatReturnItself: ObjectThatReturnItself
}

type ObjectThatReturnItself {
    innerObject: ObjectThatReturnItself
}

enum EnumTest {
    ONE
    TWO
    THREE
}

enum MappedEnum {
    ONE
    TWO
    THREE
}

input ObjectInput {
    id: ID!
    idNullable: ID
    string: String!
    stringNullable: String
    boolean: Boolean!
    booleanNullable: Boolean
    float: Float!
    floatNullable: Float
    int: Int!
    intNullable: Int
}

type ObjectTest implements Node {
    id: ID!
    idNullable: ID
    string: String!
    stringNullable: String
    boolean: Boolean!
    booleanNullable: Boolean
    float: Float!
    floatNullable: Float
    int: Int!
    intNullable: Int
    enum: EnumTest!
    enumNullable: EnumTest
}

type ObjectTwo {
    hello: String!
}

union ObjectUnion = ObjectTest | ObjectTwo

type Node1 implements Node {
    id: ID!
    additionalField: String!
}


scalar TestScalar

scalar MappedScalar
